#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/wait.h>


struct data
	{
	long rx_packets;
	long tx_packets;
	int speed;
	}DATA;
int receive_packets();
int transfer_packets();
int main(void)
	{
	pid_t pid,pid1;
	FILE *fptr;
	int receive_packet1,receive_packet2,receive_data,transfer_data,transfer_data1,transfer_data2,data_speed;
	pid = fork();
	if (pid < 0) 
		{
		fprintf(stderr, "Fork Failed\n");
		return 1;
		}
	else if (pid == 0) 
		{
		pid1=getppid();
		receive_data1 = receive();
		printf("%d\n",receive_data1);
		sleep(1);
		receive_data2 = receive();
		printf("%d\n",receive_data2);
		receive_data = receive_data2-receive_data1;
		printf("Number of receiving bytes per second is %d bytes/second\n",receive_data);
		}
	else 	
		{
		pid1=getpid();
		wait(NULL);
		}
 	pid = fork();
	
	if (pid < 0) 
		{
		fprintf(stderr, "Fork Failed\n");
		return 1;
		}
	else if (pid == 0) {
		if (getppid() == pid1)
			{
			/*receive_data = receive_data2-receive_data1;
			printf("Number of receiving bytes per second is %d bytes/second\n",receive_data);
			transfer_data = transfer_data2-transfer_data1;
			printf("Number of transfering bytes per second is %d bytes/second\n",transfer_data);*/
			}	
		else 
			{
			transfer_data1 = transfer();
			printf("%d\n",transfer_data1);
			sleep(1);
			transfer_data2 = transfer();
			printf("%d\n",transfer_data2);
			transfer_data = transfer_data2-transfer_data1;
			printf("Number of transfering bytes per second is %d bytes/second\n",transfer_data);
			}
		}
	else 
		{ 
		wait(NULL);
		}
    	return 0;
	}

int receive()
	{
	FILE* file = fopen ("/sys/class/net/eth0/statistics/rx_bytes", "r");
	int i = 0;
	fscanf (file, "%d", &i);    
	while (!feof (file))
		{  
		//printf ("%d\n", i);
	fscanf (file, "%d", &i); 
		return i;     
		}
	fclose (file);
	}

int transfer()
	{
	FILE* file = fopen ("/sys/class/net/eth0/statistics/tx_bytes", "r");
	int i = 0;
	fscanf (file, "%d", &i);    
	while (!feof (file))
		{  
		//printf ("%d\n", i);
	fscanf (file, "%d", &i); 
		return i;     
		}
	fclose (file);
	}
